%implements s14_b0_zd7eq_Start "C"

%function Start(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
NeuDiagnosticManager *diagnosticManager;
real_T modelParameters_mSolverTolerance;
real_T modelParameters_mFixedStepSize;
boolean_T modelParameters_mVariableStepSolver;
NeslSimulator *simulator;
NeuDiagnosticTree *diagnosticTree;
int32_T tmp;
char *msg;
NeslSimulationData *simulationData;
real_T time;
real_T time_p;
real_T time_e;
NeModelParameters expl_temp;
NeParameterBundle expl_temp_p;
NeModelParameters expl_temp_e;
NeModelParameters expl_temp_i;
%closefile localVarDecl
simulator = nesl_lease_simulator("quad_model/Solver Configuration_1", 0, 0);
rtDW.j3vbl1yk5q = (void *)simulator;
modelParameters_mVariableStepSolver = pointer_is_null(rtDW.j3vbl1yk5q);
if (modelParameters_mVariableStepSolver) {
    quad_model_a487e7e2_1_gateway();
    simulator = nesl_lease_simulator("quad_model/Solver Configuration_1", 0, 0);
    rtDW.j3vbl1yk5q = (void *)simulator;
}
simulationData = nesl_create_simulation_data();
rtDW.fu1bp1db1b = (void *)simulationData;
diagnosticManager = rtw_create_diagnostics();
rtDW.iweq3fmzfv = (void *)diagnosticManager;
modelParameters_mSolverTolerance = %<(SLibCG_SE(SLibCGIRGetVarStepSolverPropertyValue("RelTol", "0.001")))>;
modelParameters_mFixedStepSize = %<(SLibCG_SE(SLibCGIRGetFixStepSolverPropertyValue("FixedStep", "0.0")))>;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("SolverType", "VariableStep")))>;
simulator = (NeslSimulator *)rtDW.j3vbl1yk5q;
diagnosticManager = (NeuDiagnosticManager *)rtDW.iweq3fmzfv;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
expl_temp.mVariableStepSolver = modelParameters_mVariableStepSolver;
expl_temp.mUseSimState = false;
expl_temp.mStartTime = 0.0;
expl_temp.mSolverType = NE_SOLVER_TYPE_DAE;
expl_temp.mSolverTolerance = modelParameters_mSolverTolerance;
expl_temp.mLoggingMode = SSC_LOGGING_NONE;
expl_temp.mLoadInitialState = false;
expl_temp.mLinTrimCompile = false;
expl_temp.mFixedStepSize = modelParameters_mFixedStepSize;
tmp = nesl_initialize_simulator(simulator, expl_temp, diagnosticManager);
if (tmp != 0) {
    modelParameters_mVariableStepSolver = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (modelParameters_mVariableStepSolver) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
expl_temp_p.mRealParameters.mN = 0;
expl_temp_p.mRealParameters.mX = NULL;
expl_temp_p.mLogicalParameters.mN = 0;
expl_temp_p.mLogicalParameters.mX = NULL;
expl_temp_p.mIntegerParameters.mN = 0;
expl_temp_p.mIntegerParameters.mX = NULL;
expl_temp_p.mIndexParameters.mN = 0;
expl_temp_p.mIndexParameters.mX = NULL;
nesl_simulator_set_rtps((NeslSimulator *)rtDW.j3vbl1yk5q, expl_temp_p);
simulationData = (NeslSimulationData *)rtDW.fu1bp1db1b;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 13;
simulationData->mData->mContStates.mX = (real_T *)&rtX.ln2aukr035;
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = NULL;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = NULL;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = modelParameters_mVariableStepSolver;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = modelParameters_mVariableStepSolver;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(RTMSolverIs("CheckingCIC")))>;
simulationData->mData->mIsSolverCheckingCIC = modelParameters_mVariableStepSolver;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(RTMSolverIs("ComputingJacobian")))>;
simulationData->mData->mIsComputingJacobian = modelParameters_mVariableStepSolver;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(RTMSolverIs("RequestingReset")))>;
simulationData->mData->mIsSolverRequestingReset = modelParameters_mVariableStepSolver;
simulator = (NeslSimulator *)rtDW.j3vbl1yk5q;
diagnosticManager = (NeuDiagnosticManager *)rtDW.iweq3fmzfv;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp = ne_simulator_method(simulator, NESL_SIM_INITIALIZEONCE, simulationData, diagnosticManager);
if (tmp != 0) {
    modelParameters_mVariableStepSolver = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (modelParameters_mVariableStepSolver) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
simulator = nesl_lease_simulator("quad_model/Solver Configuration_1", 2, 0);
rtDW.ffcjqnbawh = (void *)simulator;
modelParameters_mVariableStepSolver = pointer_is_null(rtDW.ffcjqnbawh);
if (modelParameters_mVariableStepSolver) {
    quad_model_a487e7e2_1_gateway();
    simulator = nesl_lease_simulator("quad_model/Solver Configuration_1", 2, 0);
    rtDW.ffcjqnbawh = (void *)simulator;
}
simulationData = nesl_create_simulation_data();
rtDW.nkrujqw2me = (void *)simulationData;
diagnosticManager = rtw_create_diagnostics();
rtDW.fd053g150p = (void *)diagnosticManager;
modelParameters_mSolverTolerance = %<(SLibCG_SE(SLibCGIRGetVarStepSolverPropertyValue("RelTol", "0.001")))>;
modelParameters_mFixedStepSize = %<(SLibCG_SE(SLibCGIRGetFixStepSolverPropertyValue("FixedStep", "0.0")))>;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("SolverType", "VariableStep")))>;
simulator = (NeslSimulator *)rtDW.ffcjqnbawh;
diagnosticManager = (NeuDiagnosticManager *)rtDW.fd053g150p;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
expl_temp_e.mVariableStepSolver = modelParameters_mVariableStepSolver;
expl_temp_e.mUseSimState = false;
expl_temp_e.mStartTime = 0.0;
expl_temp_e.mSolverType = NE_SOLVER_TYPE_DAE;
expl_temp_e.mSolverTolerance = modelParameters_mSolverTolerance;
expl_temp_e.mLoggingMode = SSC_LOGGING_NONE;
expl_temp_e.mLoadInitialState = false;
expl_temp_e.mLinTrimCompile = false;
expl_temp_e.mFixedStepSize = modelParameters_mFixedStepSize;
tmp = nesl_initialize_simulator(simulator, expl_temp_e, diagnosticManager);
if (tmp != 0) {
    modelParameters_mVariableStepSolver = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (modelParameters_mVariableStepSolver) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
simulationData = (NeslSimulationData *)rtDW.nkrujqw2me;
time_p = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time_p;
simulationData->mData->mContStates.mN = 0;
simulationData->mData->mContStates.mX = NULL;
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = NULL;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = NULL;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = modelParameters_mVariableStepSolver;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = modelParameters_mVariableStepSolver;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(RTMSolverIs("CheckingCIC")))>;
simulationData->mData->mIsSolverCheckingCIC = modelParameters_mVariableStepSolver;
simulationData->mData->mIsComputingJacobian = false;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(RTMSolverIs("RequestingReset")))>;
simulationData->mData->mIsSolverRequestingReset = modelParameters_mVariableStepSolver;
simulator = (NeslSimulator *)rtDW.ffcjqnbawh;
diagnosticManager = (NeuDiagnosticManager *)rtDW.fd053g150p;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp = ne_simulator_method(simulator, NESL_SIM_INITIALIZEONCE, simulationData, diagnosticManager);
if (tmp != 0) {
    modelParameters_mVariableStepSolver = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (modelParameters_mVariableStepSolver) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
simulator = nesl_lease_simulator("quad_model/Solver Configuration_1", 2, 1);
rtDW.fslcizigso = (void *)simulator;
modelParameters_mVariableStepSolver = pointer_is_null(rtDW.fslcizigso);
if (modelParameters_mVariableStepSolver) {
    quad_model_a487e7e2_1_gateway();
    simulator = nesl_lease_simulator("quad_model/Solver Configuration_1", 2, 1);
    rtDW.fslcizigso = (void *)simulator;
}
simulationData = nesl_create_simulation_data();
rtDW.dgka05xe11 = (void *)simulationData;
diagnosticManager = rtw_create_diagnostics();
rtDW.k5iw0zvurl = (void *)diagnosticManager;
modelParameters_mSolverTolerance = %<(SLibCG_SE(SLibCGIRGetVarStepSolverPropertyValue("RelTol", "0.001")))>;
modelParameters_mFixedStepSize = %<(SLibCG_SE(SLibCGIRGetFixStepSolverPropertyValue("FixedStep", "0.0")))>;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRHasCompiledModelPropertyValue("SolverType", "VariableStep")))>;
simulator = (NeslSimulator *)rtDW.fslcizigso;
diagnosticManager = (NeuDiagnosticManager *)rtDW.k5iw0zvurl;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
expl_temp_i.mVariableStepSolver = modelParameters_mVariableStepSolver;
expl_temp_i.mUseSimState = false;
expl_temp_i.mStartTime = 0.0;
expl_temp_i.mSolverType = NE_SOLVER_TYPE_DAE;
expl_temp_i.mSolverTolerance = modelParameters_mSolverTolerance;
expl_temp_i.mLoggingMode = SSC_LOGGING_NONE;
expl_temp_i.mLoadInitialState = false;
expl_temp_i.mLinTrimCompile = false;
expl_temp_i.mFixedStepSize = modelParameters_mFixedStepSize;
tmp = nesl_initialize_simulator(simulator, expl_temp_i, diagnosticManager);
if (tmp != 0) {
    modelParameters_mVariableStepSolver = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (modelParameters_mVariableStepSolver) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
simulationData = (NeslSimulationData *)rtDW.dgka05xe11;
time_e = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time_e;
simulationData->mData->mContStates.mN = 0;
simulationData->mData->mContStates.mX = NULL;
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = NULL;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = NULL;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = modelParameters_mVariableStepSolver;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = modelParameters_mVariableStepSolver;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(RTMSolverIs("CheckingCIC")))>;
simulationData->mData->mIsSolverCheckingCIC = modelParameters_mVariableStepSolver;
simulationData->mData->mIsComputingJacobian = false;
modelParameters_mVariableStepSolver = %<(SLibCG_SE(RTMSolverIs("RequestingReset")))>;
simulationData->mData->mIsSolverRequestingReset = modelParameters_mVariableStepSolver;
simulator = (NeslSimulator *)rtDW.fslcizigso;
diagnosticManager = (NeuDiagnosticManager *)rtDW.k5iw0zvurl;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp = ne_simulator_method(simulator, NESL_SIM_INITIALIZEONCE, simulationData, diagnosticManager);
if (tmp != 0) {
    modelParameters_mVariableStepSolver = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (modelParameters_mVariableStepSolver) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Start(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%<LibSetSystemField(system, "CachedStartLocalVars", localVarDecl)>
%endfunction
