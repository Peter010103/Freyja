%implements s14_b0_zd7eq_Outputs "C"

%function OutputsForTID(block, system, tid) Output
%if tid == 0
%assign ::GlobalCurrentTID = 0
%<SLibCGIRAccessLocalVar(1, 0)> %% fsar15n0ry
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
NeslSimulationData *simulationData;
real_T time;
real_T tmp[24];
int_T tmp_p[7];
NeslSimulator *simulator;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
char *msg;
real_T time_p;
real_T tmp_e[37];
int_T tmp_i[8];
real_T time_e;
real_T tmp_m[37];
int_T tmp_g[8];
boolean_T ezad0nsydu;
boolean_T n4kaop4szx;
real_T l3h3hwlcnz[6];
int16_T bzp2t0oqnl;
int32_T i;
real_T tmp_j;
%closefile localVarDecl
%assign tlcOutputsFcnOfS14B6 = OpaqueTLCBlockFcn("Outputs", 14, 6, 0, 2)
%assign tlcOutputsFcnOfS14B20 = OpaqueTLCBlockFcn("Outputs", 14, 20, 0, 2)
%<SLibGetRootInportsFromFile(system)>
%<SLibGenerateExtModeOutput(system)>
simulationData = (NeslSimulationData *)rtDW.fu1bp1db1b;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 13;
simulationData->mData->mContStates.mX = (real_T *)&rtX.ln2aukr035;
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = NULL;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = NULL;
ezad0nsydu = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = ezad0nsydu;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
ezad0nsydu = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = ezad0nsydu;
ezad0nsydu = %<(SLibCG_SE(RTMSolverIs("CheckingCIC")))>;
simulationData->mData->mIsSolverCheckingCIC = ezad0nsydu;
ezad0nsydu = %<(SLibCG_SE(RTMSolverIs("ComputingJacobian")))>;
simulationData->mData->mIsComputingJacobian = ezad0nsydu;
ezad0nsydu = %<(SLibCG_SE(RTMSolverIs("RequestingReset")))>;
simulationData->mData->mIsSolverRequestingReset = ezad0nsydu;
tmp_p[0] = 0;
tmp[0] = rtB.krkfrgr5lp[0];
tmp[1] = rtB.krkfrgr5lp[1];
tmp[2] = rtB.krkfrgr5lp[2];
tmp[3] = rtB.krkfrgr5lp[3];
tmp_p[1] = 4;
tmp[4] = rtB.bdf2x2uoq0[0];
tmp[5] = rtB.bdf2x2uoq0[1];
tmp[6] = rtB.bdf2x2uoq0[2];
tmp[7] = rtB.bdf2x2uoq0[3];
tmp_p[2] = 8;
tmp[8] = rtB.ou1uxbnbsu[0];
tmp[9] = rtB.ou1uxbnbsu[1];
tmp[10] = rtB.ou1uxbnbsu[2];
tmp[11] = rtB.ou1uxbnbsu[3];
tmp_p[3] = 12;
tmp[12] = rtB.in4w3jl5ci[0];
tmp[13] = rtB.in4w3jl5ci[1];
tmp[14] = rtB.in4w3jl5ci[2];
tmp[15] = rtB.in4w3jl5ci[3];
tmp_p[4] = 16;
tmp[16] = rtB.bdwqzbwe2u[0];
tmp[17] = rtB.bdwqzbwe2u[1];
tmp[18] = rtB.bdwqzbwe2u[2];
tmp[19] = rtB.bdwqzbwe2u[3];
tmp_p[5] = 20;
tmp[20] = rtB.mj4obgjuu5[0];
tmp[21] = rtB.mj4obgjuu5[1];
tmp[22] = rtB.mj4obgjuu5[2];
tmp[23] = rtB.mj4obgjuu5[3];
tmp_p[6] = 24;
simulationData->mData->mInputValues.mN = 24;
simulationData->mData->mInputValues.mX = &tmp[0];
simulationData->mData->mInputOffsets.mN = 7;
simulationData->mData->mInputOffsets.mX = &tmp_p[0];
simulationData->mData->mOutputs.mN = 13;
simulationData->mData->mOutputs.mX = &rtB.ihfomdwvds[0];
simulationData->mData->mSampleHits.mN = 0;
simulationData->mData->mSampleHits.mX = NULL;
simulationData->mData->mIsFundamentalSampleHit = false;
simulator = (NeslSimulator *)rtDW.j3vbl1yk5q;
diagnosticManager = (NeuDiagnosticManager *)rtDW.iweq3fmzfv;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
i = ne_simulator_method(simulator, NESL_SIM_OUTPUTS, simulationData, diagnosticManager);
if (i != 0) {
    ezad0nsydu = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (ezad0nsydu) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
simulationData = (NeslSimulationData *)rtDW.nkrujqw2me;
time_p = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time_p;
simulationData->mData->mContStates.mN = 0;
simulationData->mData->mContStates.mX = NULL;
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = NULL;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = NULL;
ezad0nsydu = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = ezad0nsydu;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
ezad0nsydu = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = ezad0nsydu;
ezad0nsydu = %<(SLibCG_SE(RTMSolverIs("CheckingCIC")))>;
simulationData->mData->mIsSolverCheckingCIC = ezad0nsydu;
simulationData->mData->mIsComputingJacobian = false;
ezad0nsydu = %<(SLibCG_SE(RTMSolverIs("RequestingReset")))>;
simulationData->mData->mIsSolverRequestingReset = ezad0nsydu;
tmp_i[0] = 0;
tmp_e[0] = rtB.krkfrgr5lp[0];
tmp_e[1] = rtB.krkfrgr5lp[1];
tmp_e[2] = rtB.krkfrgr5lp[2];
tmp_e[3] = rtB.krkfrgr5lp[3];
tmp_i[1] = 4;
tmp_e[4] = rtB.bdf2x2uoq0[0];
tmp_e[5] = rtB.bdf2x2uoq0[1];
tmp_e[6] = rtB.bdf2x2uoq0[2];
tmp_e[7] = rtB.bdf2x2uoq0[3];
tmp_i[2] = 8;
tmp_e[8] = rtB.ou1uxbnbsu[0];
tmp_e[9] = rtB.ou1uxbnbsu[1];
tmp_e[10] = rtB.ou1uxbnbsu[2];
tmp_e[11] = rtB.ou1uxbnbsu[3];
tmp_i[3] = 12;
tmp_e[12] = rtB.in4w3jl5ci[0];
tmp_e[13] = rtB.in4w3jl5ci[1];
tmp_e[14] = rtB.in4w3jl5ci[2];
tmp_e[15] = rtB.in4w3jl5ci[3];
tmp_i[4] = 16;
tmp_e[16] = rtB.bdwqzbwe2u[0];
tmp_e[17] = rtB.bdwqzbwe2u[1];
tmp_e[18] = rtB.bdwqzbwe2u[2];
tmp_e[19] = rtB.bdwqzbwe2u[3];
tmp_i[5] = 20;
tmp_e[20] = rtB.mj4obgjuu5[0];
tmp_e[21] = rtB.mj4obgjuu5[1];
tmp_e[22] = rtB.mj4obgjuu5[2];
tmp_e[23] = rtB.mj4obgjuu5[3];
tmp_i[6] = 24;
memcpy(&tmp_e[24], &rtB.ihfomdwvds[0], 13U * sizeof(real_T));
tmp_i[7] = 37;
simulationData->mData->mInputValues.mN = 37;
simulationData->mData->mInputValues.mX = &tmp_e[0];
simulationData->mData->mInputOffsets.mN = 8;
simulationData->mData->mInputOffsets.mX = &tmp_i[0];
simulationData->mData->mOutputs.mN = 23;
simulationData->mData->mOutputs.mX = &rtB.odpswtpr1f[0];
simulationData->mData->mSampleHits.mN = 0;
simulationData->mData->mSampleHits.mX = NULL;
simulationData->mData->mIsFundamentalSampleHit = false;
simulator = (NeslSimulator *)rtDW.ffcjqnbawh;
diagnosticManager = (NeuDiagnosticManager *)rtDW.fd053g150p;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
i = ne_simulator_method(simulator, NESL_SIM_OUTPUTS, simulationData, diagnosticManager);
if (i != 0) {
    ezad0nsydu = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (ezad0nsydu) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
for (i = 0; i < 6; i++) {
    rtB.kx4mud3m2x[i] = rtB.odpswtpr1f[i + 17];
}
%<tlcOutputsFcnOfS14B6>\
rtB.kx4mud3m2x[6] = fsar15n0ry[2];
tmp_j = muDoubleScalarFloor(fsar15n0ry[0] * 65536.0);
if (muDoubleScalarIsNaN(tmp_j) || muDoubleScalarIsInf(tmp_j)) {
    tmp_j = 0.0;
} else {
    tmp_j = muDoubleScalarRem(tmp_j, 65536.0);
}
rtB.c5rmflccbu = (uint16_T)(tmp_j < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-tmp_j : (int32_T)(uint16_T)tmp_j);
ezad0nsydu = (rtB.c5rmflccbu <= rtP.Point25_Value);
n4kaop4szx = (rtB.c5rmflccbu >= rtP.Point75_Value);
if (rtB.c5rmflccbu <= rtP.Point50_Value) {
    if (ezad0nsydu) {
        rtB.bwuxjdch0z = (uint16_T)(rtP.Point25_Value - rtB.c5rmflccbu);
        rtB.embjydvtbv = rtB.bwuxjdch0z;
    } else {
        rtB.jkhxgweimz = (uint16_T)(rtB.c5rmflccbu - rtP.Point25_Value);
        rtB.embjydvtbv = rtB.jkhxgweimz;
    }
    rtB.nciig3rugi = rtB.embjydvtbv;
} else {
    if (n4kaop4szx) {
        rtB.nouxrv2gqp = (uint16_T)(rtB.c5rmflccbu - rtP.Point75_Value);
        rtB.mvazbyhv5r = rtB.nouxrv2gqp;
    } else {
        rtB.lhhecn2bev = (uint16_T)(rtP.Point75_Value - rtB.c5rmflccbu);
        rtB.mvazbyhv5r = rtB.lhhecn2bev;
    }
    rtB.nciig3rugi = rtB.mvazbyhv5r;
}
bzp2t0oqnl = look1_iu16lu32n16ts16Ds32_binlcf(rtB.nciig3rugi, rtP.LookUpTable_bp01Data, rtP.LookUpTable_tableData, 999U);
if (ezad0nsydu || n4kaop4szx) {
    rtB.gd1fgitdln = bzp2t0oqnl;
} else {
    rtB.gd1fgitdln = (int16_T)-bzp2t0oqnl;
}
tmp_j = muDoubleScalarFloor(fsar15n0ry[1] * 65536.0);
if (muDoubleScalarIsNaN(tmp_j) || muDoubleScalarIsInf(tmp_j)) {
    tmp_j = 0.0;
} else {
    tmp_j = muDoubleScalarRem(tmp_j, 65536.0);
}
rtB.olxyui0myo = (uint16_T)(tmp_j < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-tmp_j : (int32_T)(uint16_T)tmp_j);
ezad0nsydu = (rtB.olxyui0myo <= rtP.Point25_Value_alciqehvhu);
n4kaop4szx = (rtB.olxyui0myo >= rtP.Point75_Value_kr35t2u5dk);
if (rtB.olxyui0myo <= rtP.Point50_Value_iqtxe2pnyf) {
    if (ezad0nsydu) {
        rtB.e1f4fyxpbj = (uint16_T)(rtP.Point25_Value_alciqehvhu - rtB.olxyui0myo);
        rtB.ouna2zok2j = rtB.e1f4fyxpbj;
    } else {
        rtB.mdd2wdf40g = (uint16_T)(rtB.olxyui0myo - rtP.Point25_Value_alciqehvhu);
        rtB.ouna2zok2j = rtB.mdd2wdf40g;
    }
    rtB.jkiw2dlrcm = rtB.ouna2zok2j;
} else {
    if (n4kaop4szx) {
        rtB.anzan1cseo = (uint16_T)(rtB.olxyui0myo - rtP.Point75_Value_kr35t2u5dk);
        rtB.jeuszoji2x = rtB.anzan1cseo;
    } else {
        rtB.ojakwetfuj = (uint16_T)(rtP.Point75_Value_kr35t2u5dk - rtB.olxyui0myo);
        rtB.jeuszoji2x = rtB.ojakwetfuj;
    }
    rtB.jkiw2dlrcm = rtB.jeuszoji2x;
}
bzp2t0oqnl = look1_iu16lu32n16ts16Ds32_binlcf(rtB.jkiw2dlrcm, rtP.LookUpTable_bp01Data_dprhocjpnz, rtP.LookUpTable_tableData_i2evlutpck, 999U);
if (ezad0nsydu || n4kaop4szx) {
    rtB.cvrxr3djuj = bzp2t0oqnl;
} else {
    rtB.cvrxr3djuj = (int16_T)-bzp2t0oqnl;
}
rtB.l5niqhz3ef = rtB.boiwofgikk - fsar15n0ry[2];
rtB.gwwmwgw1hb = rtP.PIDController2DOF_D * rtB.l5niqhz3ef;
rtB.mzpnxzjhar = rtX.eclxswx3o1;
rtB.dvkvfnw2zt = rtB.gwwmwgw1hb - rtB.mzpnxzjhar;
rtB.akpo5rg1mo = rtP.PIDController2DOF_N * rtB.dvkvfnw2zt;
rtB.nqy20cjav2 = rtP.Constant4_Value - fsar15n0ry[2];
rtB.ndkq2bxqkx = rtP.PIDController2DOF_I * rtB.nqy20cjav2;
rtB.fqgxwll4lj = rtX.nrtkru04fn;
rtB.bthceztsuf = rtB.livq3bqdpf - fsar15n0ry[2];
rtB.jgtmjm31vg = rtP.PIDController2DOF_P * rtB.bthceztsuf;
rtB.fjyfxnucnl = (rtB.jgtmjm31vg + rtB.fqgxwll4lj) + rtB.akpo5rg1mo;
%<tlcOutputsFcnOfS14B20>\
rtB.j4xfjf0m5e = rtP.PIDController2DOF1_c * rtB.nkxaqa3f4t[2];
rtB.nntstccba3 = rtB.j4xfjf0m5e - fsar15n0ry[1];
rtB.c1ndmm42cs = rtP.PIDController2DOF1_D * rtB.nntstccba3;
rtB.gkxmclug4s = rtX.gxunomsa10;
rtB.piqpsshjj3 = rtB.c1ndmm42cs - rtB.gkxmclug4s;
rtB.li5a0140mm = rtP.PIDController2DOF1_N * rtB.piqpsshjj3;
rtB.ex412112n4 = rtB.nkxaqa3f4t[2] - fsar15n0ry[1];
rtB.gv0bdd5hgo = rtP.PIDController2DOF1_I * rtB.ex412112n4;
rtB.h1jgtlrznc = rtX.b2q1wtfuy0;
rtB.fdc0e0wzeb = rtP.PIDController2DOF1_b * rtB.nkxaqa3f4t[2];
rtB.jwxmlobdcc = rtB.fdc0e0wzeb - fsar15n0ry[1];
rtB.nnavpfywxl = rtP.PIDController2DOF1_P * rtB.jwxmlobdcc;
rtB.d4dyhuaqlu = (rtB.nnavpfywxl + rtB.h1jgtlrznc) + rtB.li5a0140mm;
rtB.peo1mp0p1p = rtP.PIDController2DOF2_c * rtB.nkxaqa3f4t[1];
rtB.pok4upxu3e = rtB.peo1mp0p1p - fsar15n0ry[0];
rtB.hpmiqrp0lv = rtP.PIDController2DOF2_D * rtB.pok4upxu3e;
rtB.izmj21dwvf = rtX.mac20sf5xm;
rtB.bhvmqncve1 = rtB.hpmiqrp0lv - rtB.izmj21dwvf;
rtB.n5hqclvb1a = rtP.PIDController2DOF2_N * rtB.bhvmqncve1;
rtB.k2wm0xj52p = rtB.nkxaqa3f4t[1] - fsar15n0ry[0];
rtB.ii5jyp0l5w = rtP.PIDController2DOF2_I * rtB.k2wm0xj52p;
rtB.oklkxfezzi = rtX.c1lnotgjhi;
rtB.en5fquv5s1 = rtP.PIDController2DOF2_b * rtB.nkxaqa3f4t[1];
rtB.p4o5rts4tk = rtB.en5fquv5s1 - fsar15n0ry[0];
rtB.akrifkcpv5 = rtP.PIDController2DOF2_P * rtB.p4o5rts4tk;
rtB.lkbzfsu4hu = (rtB.akrifkcpv5 + rtB.oklkxfezzi) + rtB.n5hqclvb1a;
rtB.ojctumm130 = (real_T)rtB.gd1fgitdln * 6.103515625E-5 * 0.0;
rtB.lczjzi2zpe = (real_T)rtB.cvrxr3djuj * 6.103515625E-5 * 0.0;
rtB.krkfrgr5lp[0] = rtB.ojctumm130;
rtB.krkfrgr5lp[1] = 0.0;
rtB.krkfrgr5lp[2] = 0.0;
rtB.krkfrgr5lp[3] = 0.0;
rtB.bdf2x2uoq0[0] = rtB.lczjzi2zpe;
rtB.bdf2x2uoq0[1] = 0.0;
rtB.bdf2x2uoq0[2] = 0.0;
rtB.bdf2x2uoq0[3] = 0.0;
rtB.ou1uxbnbsu[0] = rtB.nkxaqa3f4t[0];
rtB.ou1uxbnbsu[1] = 0.0;
rtB.ou1uxbnbsu[2] = 0.0;
rtB.ou1uxbnbsu[3] = 0.0;
rtB.in4w3jl5ci[0] = rtB.lkbzfsu4hu;
rtB.in4w3jl5ci[1] = 0.0;
rtB.in4w3jl5ci[2] = 0.0;
rtB.in4w3jl5ci[3] = 0.0;
rtB.bdwqzbwe2u[0] = rtB.d4dyhuaqlu;
rtB.bdwqzbwe2u[1] = 0.0;
rtB.bdwqzbwe2u[2] = 0.0;
rtB.bdwqzbwe2u[3] = 0.0;
rtB.mj4obgjuu5[0] = rtB.fjyfxnucnl;
rtB.mj4obgjuu5[1] = 0.0;
rtB.mj4obgjuu5[2] = 0.0;
rtB.mj4obgjuu5[3] = 0.0;
simulationData = (NeslSimulationData *)rtDW.dgka05xe11;
time_e = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time_e;
simulationData->mData->mContStates.mN = 0;
simulationData->mData->mContStates.mX = NULL;
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = NULL;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = NULL;
ezad0nsydu = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = ezad0nsydu;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
ezad0nsydu = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = ezad0nsydu;
ezad0nsydu = %<(SLibCG_SE(RTMSolverIs("CheckingCIC")))>;
simulationData->mData->mIsSolverCheckingCIC = ezad0nsydu;
simulationData->mData->mIsComputingJacobian = false;
ezad0nsydu = %<(SLibCG_SE(RTMSolverIs("RequestingReset")))>;
simulationData->mData->mIsSolverRequestingReset = ezad0nsydu;
tmp_g[0] = 0;
tmp_m[0] = rtB.krkfrgr5lp[0];
tmp_m[1] = rtB.krkfrgr5lp[1];
tmp_m[2] = rtB.krkfrgr5lp[2];
tmp_m[3] = rtB.krkfrgr5lp[3];
tmp_g[1] = 4;
tmp_m[4] = rtB.bdf2x2uoq0[0];
tmp_m[5] = rtB.bdf2x2uoq0[1];
tmp_m[6] = rtB.bdf2x2uoq0[2];
tmp_m[7] = rtB.bdf2x2uoq0[3];
tmp_g[2] = 8;
tmp_m[8] = rtB.ou1uxbnbsu[0];
tmp_m[9] = rtB.ou1uxbnbsu[1];
tmp_m[10] = rtB.ou1uxbnbsu[2];
tmp_m[11] = rtB.ou1uxbnbsu[3];
tmp_g[3] = 12;
tmp_m[12] = rtB.in4w3jl5ci[0];
tmp_m[13] = rtB.in4w3jl5ci[1];
tmp_m[14] = rtB.in4w3jl5ci[2];
tmp_m[15] = rtB.in4w3jl5ci[3];
tmp_g[4] = 16;
tmp_m[16] = rtB.bdwqzbwe2u[0];
tmp_m[17] = rtB.bdwqzbwe2u[1];
tmp_m[18] = rtB.bdwqzbwe2u[2];
tmp_m[19] = rtB.bdwqzbwe2u[3];
tmp_g[5] = 20;
tmp_m[20] = rtB.mj4obgjuu5[0];
tmp_m[21] = rtB.mj4obgjuu5[1];
tmp_m[22] = rtB.mj4obgjuu5[2];
tmp_m[23] = rtB.mj4obgjuu5[3];
tmp_g[6] = 24;
memcpy(&tmp_m[24], &rtB.ihfomdwvds[0], 13U * sizeof(real_T));
tmp_g[7] = 37;
simulationData->mData->mInputValues.mN = 37;
simulationData->mData->mInputValues.mX = &tmp_m[0];
simulationData->mData->mInputOffsets.mN = 8;
simulationData->mData->mInputOffsets.mX = &tmp_g[0];
simulationData->mData->mOutputs.mN = 6;
simulationData->mData->mOutputs.mX = &l3h3hwlcnz[0];
simulationData->mData->mSampleHits.mN = 0;
simulationData->mData->mSampleHits.mX = NULL;
simulationData->mData->mIsFundamentalSampleHit = false;
simulator = (NeslSimulator *)rtDW.fslcizigso;
diagnosticManager = (NeuDiagnosticManager *)rtDW.k5iw0zvurl;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
i = ne_simulator_method(simulator, NESL_SIM_OUTPUTS, simulationData, diagnosticManager);
if (i != 0) {
    ezad0nsydu = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (ezad0nsydu) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 1
%assign ::GlobalCurrentTID = 1
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
rtB.boiwofgikk = rtP.PIDController2DOF_c * rtP.Constant4_Value;
rtB.livq3bqdpf = rtP.PIDController2DOF_b * rtP.Constant4_Value;
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 3, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutput1LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
